#Использовать cmdline
#Использовать 1commands
#Использовать logos
#Использовать json
#Использовать v8runner

#Использовать "."

Перем фЛог;

// Получить имя лога продукта
//
// Возвращаемое значение:
//  Строка   - имя лога продукта
//
Функция ИмяЛога() Экспорт
	Возврат "oscript.app.CopyBase";
КонецФункции

Функция ПолучитьТекстИзФайла( Знач пИмяФайла )
	
	файлОбмена = Новый Файл(пИмяФайла);
	Данные = "";
	Если файлОбмена.Существует() Тогда
		чтениеТекста = Новый ЧтениеТекста(пИмяФайла, КодировкаТекста.UTF8);
		данные = чтениеТекста.Прочитать();
		чтениеТекста.Закрыть();
	Иначе
		Возврат Ложь;
	КонецЕсли;
	возврат данные;
КонецФункции

Функция ПолучитьПараметры( Знач пАргументы )
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	
	Парсер.ДобавитьПараметр("ПутьКФайлу");
	Парсер.ДобавитьПараметрФлаг("-debug");
	
	Параметры = Парсер.Разобрать(пАргументы);
	
	Если Не Параметры.Количество() > 0 Тогда
		
		Сообщить("Должен быть передан 1 параметр - файл настроек.");
		Сообщить("Например,");
		Сообщить("oscript CopyBase.os g:\git\oScript-Examples\Configs\db111.base_config");
		
		ЗавершитьРаботу(1);
		
	КонецЕсли;
	
	Если Параметры["-debug"] Тогда
		
		фЛог.УстановитьУровень(УровниЛога.Отладка);
		
	КонецЕсли;
	
	текстНастроек = ПолучитьТекстИзФайла(Параметры["ПутьКФайлу"]);
	Если текстНастроек = Ложь Тогда
		
		Сообщить("Переданный файл не найден или не является файлом настроек.");
		Сообщить("Для создания файла воспользуйтесь обработкой _ПодготовкаНастроекДляБазы.epf");
		
		ЗавершитьРаботу(1);
		
	КонецЕсли;
	
	ЧтениеJSON = Новый ПарсерJSON;
	параметрыИзФайла = ЧтениеJSON.ПрочитатьJSON(текстНастроек,,,Истина);
	
	прочитанныеПараметры = Новый Соответствие;
	
	ПрочитатьПараметрыРекурсивно( параметрыИзФайла, прочитанныеПараметры );
	
	Для каждого цЭлемент Из прочитанныеПараметры Цикл
		
		фЛог.Отладка( "Прочитан параметр " + цЭлемент.Ключ + ": " + цЭлемент.Значение );
		
	КонецЦикла;
	
	Возврат прочитанныеПараметры;
	
КонецФункции

Процедура ПрочитатьПараметрыРекурсивно( Знач пПараметры, пПрочитенныеПараметры )
	
	Для каждого цЭлемент Из пПараметры Цикл
		
		Если ТипЗнч( цЭлемент.Значение ) = Тип("Структура")
			ИЛИ ТипЗнч( цЭлемент.Значение ) = Тип("Соответствие") Тогда
			
			ПрочитатьПараметрыРекурсивно( цЭлемент.Значение, пПрочитенныеПараметры );
			
		Иначе
			
			пПрочитенныеПараметры.Вставить( цЭлемент.Ключ, цЭлемент.Значение );
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ФайлСуществует( Знач пИмяФайла )
	
	файл = Новый Файл( пИмяФайла );
	
	Возврат файл.Существует();
	
КонецФункции

Функция ОбернутьВКавычки(Знач Строка);
	Если Лев(Строка, 1) = """" и Прав(Строка, 1) = """" Тогда
		Возврат Строка;
	Иначе
		Возврат """" + Строка + """";
	КонецЕсли;
КонецФункции

Процедура ВыполнитьКоманду(Знач пАргументы)
	
	замер = Новый Замер;
	
	замер.НачатьЗамер();
	
	замер.НачатьЗамер( "РазборПараметров" );
	
	параметры = ПолучитьПараметры( пАргументы );
	
	замер.СообщитьЗамер( "Параметры получены" );
	
	Если фЛог.Уровень() = УровниЛога.Отладка Тогда
		
		логКомандыЗапуска = Логирование.ПолучитьЛог(РаботаСSQL.ИмяЛога());
		логКомандыЗапуска.УстановитьУровень(УровниЛога.Отладка);
		
	КонецЕсли;
	
	Если параметры["Source_SQL.UseBackup"] = Истина Тогда
		
		замер.НачатьЗамер( "Бекап" );
		
		результат = РаботаСSQL.ВыполнитьБекап( параметры["Source_SQL.Server"], параметры["Source_SQL.User"], параметры["Source_SQL.Password"], параметры["Source_SQL.Base"], параметры["FileBackup"] );
		
		Если Не результат Тогда
			ЗавершитьРаботу(1);
		КонецЕсли;
		
		замер.СообщитьЗамер( "Выполнен бекап");
		
	КонецЕсли;
	
	Если параметры["Current_SQL.UseRestore"] = Истина Тогда
		
		замер.НачатьЗамер( "Восстановление" );
		
		результат = РаботаСSQL.ВыполнитьСкрипт( параметры["Current_SQL.Server"], параметры["Current_SQL.User"], параметры["Current_SQL.Password"], параметры["Current_SQL.Base"], параметры["Script_Restore"] );
		
		Если Не результат Тогда
			ЗавершитьРаботу(1);
		КонецЕсли;
		
		замер.СообщитьЗамер( "Выполнено восстановление");
		
	КонецЕсли;
	
	Если параметры["Current_SQL.DelBackup"] = Истина Тогда
		
		замер.НачатьЗамер( "УдалениеБекапа" );
		
		Если ФайлСуществует( параметры["FileBackup"] ) Тогда
			
			УдалитьФайлы( параметры["FileBackup"] );
			
		КонецЕсли;
		
		замер.СообщитьЗамер( "Удален бекап" );
		
	КонецЕсли;
	
	Если параметры["Current_Repo.Blind"] = Истина Тогда
		
		замер.НачатьЗамер( "ОтключениеОтХранилища" );
		
		Конфигуратор = Новый УправлениеКонфигуратором;
		Конфигуратор.УстановитьКонтекст(параметры["Current_Base.Connect"], параметры["Current_Base.User"], параметры["Current_Base.Password"]);
		Конфигуратор.ПутьКПлатформе1С( параметры["EXE1CV8"] );
		
		Если ЗначениеЗаполнено( параметры["Current_Base.EPF"] )
			И ФайлСуществует( параметры["Current_Base.EPF"] ) Тогда
			
			замер.НачатьЗамер( "ВыполнениеОбработки" );
			
			ДополнительныеКлючи = "/Execute"+ОбернутьВКавычки(параметры["Current_Base.EPF"]);
			
			Конфигуратор.ЗапуститьВРежимеПредприятия("", Неопределено, ДополнительныеКлючи);
			Текст = Конфигуратор.ВыводКоманды();
			Если Не ПустаяСтрока(Текст) Тогда
				фЛог.Информация(Текст);
			КонецЕсли;
			
			замер.СообщитьЗамер( "Выполнена обработка" );
			
		КонецЕсли;
		
		замер.НачатьЗамер( "ОтключениеОтХранилища" );
		
		Конфигуратор.ОтключитьсяОтХранилища();
		Текст = Конфигуратор.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			фЛог.Информация(Текст);
		КонецЕсли;
		
		замер.СообщитьЗамер( "Отключено от хранилища" );
		
		замер.НачатьЗамер( "ПодключениеКХранилищу" );
		
		Конфигуратор.ПодключитьсяКХранилищу(параметры["Current_Repo.Connect"], параметры["Current_Repo.User"], параметры["Current_Repo.Password"], Истина );
		Текст = Конфигуратор.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			фЛог.Информация(Текст);
		КонецЕсли;
		
		замер.СообщитьЗамер( "Подключено к хранилищу" );
		
		Если параметры["Current_Repo.UpdateCfg"] Тогда
			
			замер.НачатьЗамер( "ОбновлениеКонфигурации" );
			
			Конфигуратор.ОбновитьКонфигурациюБазыДанныхИзХранилища(параметры["Current_Repo.Connect"], параметры["Current_Repo.User"], параметры["Current_Repo.Password"] );
			Текст = Конфигуратор.ВыводКоманды();
			Если Не ПустаяСтрока(Текст) Тогда
				фЛог.Информация(Текст);
			КонецЕсли;
			
			замер.СообщитьЗамер( "Конфигурация обновлена" );
			
		КонецЕсли;
		
		файлИнформаци = Конфигуратор.ФайлИнформации();
		
		Если ФайлСуществует( файлИнформаци ) Тогда
			УдалитьФайлы( файлИнформаци );
		КонецЕсли;
		
	КонецЕсли;
	
	замер.СообщитьЗавершение();
	
КонецПроцедуры

фЛог = Логирование.ПолучитьЛог(ИмяЛога());

ВыполнитьКоманду(АргументыКоманднойСтроки);