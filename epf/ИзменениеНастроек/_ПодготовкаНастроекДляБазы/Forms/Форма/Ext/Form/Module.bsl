

&НаКлиентеНаСервереБезКонтекста
Функция РасширениеФайлаНастроек()
	
	Возврат "base_config";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РасширениеФайлаСпискаНастроек()
	
	Возврат "list_configs";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КаталогПоиска()
	
	Возврат "\..\..\Configs\";
	
КонецФункции



&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастроитьВидимостьДоступность();
	
	ИспользуемоеИмяФайла = РеквизитФормыВЗначение( "Объект" ).ИспользуемоеИмяФайла;
	
	структ = ПеременныеОкружения();
	
	Если структ.Свойство( "oscript" ) Тогда
		
		Элементы.OSCRIPT.СписокВыбора.Добавить( структ.oscript );
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если Не ВебКлиент Тогда
		
		структ = ПеременныеОкружения();
		
		Если структ.Свойство( "oscript" )
			И Элементы.OSCRIPT.СписокВыбора.НайтиПоЗначению( структ.oscript ) = Неопределено Тогда
			
			Элементы.OSCRIPT.СписокВыбора.Добавить( структ.oscript );
			
		КонецЕсли;
		
		EXE1CV8 = КаталогПрограммы() + "1cv8.exe";
		
		ПрочитатьСписокФайловНастройки();
		Прочитать( Неопределено );
		
	#Иначе
		
		Отказ = Истина;
		
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПриОткрытииЗавершение_Отказ", ЭтаФорма),  НСтр( "ru='Работа в веб-клиенте не поддерживается'" ) );
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСписокФайловНастройки()
	
	#Если Не ВебКлиент Тогда
		
		текФайл = Новый Файл( ИспользуемоеИмяФайла );
		ТекущийКаталог = текФайл.Путь;
		
		каталогПоиска = Новый Файл( ТекущийКаталог + КаталогПоиска() );
		
		каталогПоиска.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПрочитатьСписокФайловНастройкиЗавершение", ЭтаФорма, Новый Структура("каталогПоиска", каталогПоиска)));
		
	#КонецЕсли
		
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСписокФайловНастройкиЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	#Если Не ВебКлиент Тогда
		
	каталогПоиска = ДополнительныеПараметры.каталогПоиска;
	
	Элементы.ДекорацияСоздатьКаталогПоиска.Видимость = Не Существует;
	
	Если Существует Тогда
		
		НачатьПоискФайлов(Новый ОписаниеОповещения("ПрочитатьСписокФайловНастройкиЗавершениеЗавершение", ЭтаФорма, Новый Структура("каталогПоиска", каталогПоиска)),  каталогПоиска.ПолноеИмя, "*." + РасширениеФайлаСпискаНастроек(), Истина );
		
	Иначе
		
		Элементы.ДекорацияСоздатьКаталогПоиска.Видимость = Истина;
		
		фсМассив = Новый Массив;
		
		фсМассив.Добавить( НСтр( "ru='Эта обработка автоматически сохраняет список конфигов в '" ) );
		фсМассив.Добавить( Новый ФорматированнаяСтрока( каталогПоиска.ПолноеИмя, Новый Шрифт(,, Истина) ) );
		фсМассив.Добавить( "." + Символы.ПС );
		фсМассив.Добавить( НСтр( "ru='Этот каталог не обнаружен. '" ) );
		фсМассив.Добавить( Новый ФорматированнаяСтрока( НСтр( "ru='Нажмите, чтобы создать'" ),,,, "СоздатьКаталог"));
		
		Элементы.ДекорацияСоздатьКаталогПоиска.Заголовок = Новый ФорматированнаяСтрока(фсМассив);
		
	КонецЕсли;

	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСписокФайловНастройкиЗавершениеЗавершение(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	#Если Не ВебКлиент Тогда
		
		каталогПоиска = ДополнительныеПараметры.каталогПоиска;
		соот_ПрочитанныеФайлы = Новый Соответствие;
		
		Для каждого цНайденныйФайлСписка Из НайденныеФайлы Цикл
			
			чтениеJSON = Новый ЧтениеJSON;
			
			чтениеJSON.ОткрытьФайл(цНайденныйФайлСписка.ПолноеИмя);
			массивФайлов = ПрочитатьJSON( ЧтениеJSON, Истина );
			чтениеJSON.Закрыть();
			
			Для каждого цЭлемент Из массивФайлов Цикл
				соот_ПрочитанныеФайлы.Вставить( цЭлемент );
			КонецЦикла;
			
		КонецЦикла;
		
		НачатьПоискФайлов(Новый ОписаниеОповещения("ПрочитатьСписокФайловНастройкиЗавершениеЗавершениеЗавершение", ЭтаФорма, Новый Структура("соот_ПрочитанныеФайлы", соот_ПрочитанныеФайлы)),  каталогПоиска.ПолноеИмя, "*." + РасширениеФайлаНастроек(), Истина );
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСписокФайловНастройкиЗавершениеЗавершениеЗавершение(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	#Если Не ВебКлиент Тогда
		
		соот_ПрочитанныеФайлы = ДополнительныеПараметры.соот_ПрочитанныеФайлы;
		
		Для каждого цНайденныйФайл Из найденныеФайлы Цикл
			
			соот_ПрочитанныеФайлы.Вставить( цНайденныйФайл.ПолноеИмя );
			
		КонецЦикла;
		
		Для каждого цЭлемент Из соот_ПрочитанныеФайлы Цикл
			
			файл = Новый Файл( цЭлемент.Ключ );
			
			Элементы.ИмяФайлаНастроек.СписокВыбора.Добавить( файл.ПолноеИмя, файл.Имя );
			
		КонецЦикла;
		
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	#Если Не ВебКлиент Тогда
		
		каталогПоиска = Новый Файл( ТекущийКаталог + КаталогПоиска() );
		
		каталогПоиска.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтаФорма, Новый Структура("каталогПоиска", каталогПоиска)));
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	#Если Не ВебКлиент Тогда
		
		каталогПоиска = ДополнительныеПараметры.каталогПоиска;
		
		Если Не Существует Тогда
			Возврат;
		КонецЕсли;
		
		массивФайлов = Элементы.ИмяФайлаНастроек.СписокВыбора.ВыгрузитьЗначения();
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.ОткрытьФайл( каталогПоиска.ПолноеИмя + "\." + РасширениеФайлаСпискаНастроек(),,, Новый ПараметрыЗаписиJSON(, Символы.Таб ));
		
		ЗаписатьJSON( ЗаписьJSON, массивФайлов );
		
		ЗаписьJSON.Закрыть();
		
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение_Отказ(ДополнительныеПараметры) Экспорт
	
	

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ЗагружатьИзБекапа Тогда
		
		ПроверяемыеРеквизиты.Удалить( ПроверяемыеРеквизиты.Найти( "Current_SQL_Server" ) );
		ПроверяемыеРеквизиты.Удалить( ПроверяемыеРеквизиты.Найти( "Current_SQL_User" ) );
		ПроверяемыеРеквизиты.Удалить( ПроверяемыеРеквизиты.Найти( "Current_SQL_Base" ) );
		ПроверяемыеРеквизиты.Удалить( ПроверяемыеРеквизиты.Найти( "Script_Restore" ) );
		
	КонецЕсли;
	
	Если Не ВыгружатьБекап Тогда
		
		ПроверяемыеРеквизиты.Удалить( ПроверяемыеРеквизиты.Найти( "Source_SQL_Server" ) );
		ПроверяемыеРеквизиты.Удалить( ПроверяемыеРеквизиты.Найти( "Source_SQL_User" ) );
		ПроверяемыеРеквизиты.Удалить( ПроверяемыеРеквизиты.Найти( "Source_SQL_Base" ) );
		ПроверяемыеРеквизиты.Удалить( ПроверяемыеРеквизиты.Найти( "FileBackup" ) );
		
	КонецЕсли;
	
	Если Не ПодключатьКХранилищу Тогда
		
		ПроверяемыеРеквизиты.Удалить( ПроверяемыеРеквизиты.Найти( "База_СтрокаПодключения" ) );
		ПроверяемыеРеквизиты.Удалить( ПроверяемыеРеквизиты.Найти( "База_Пользователь" ) );
		ПроверяемыеРеквизиты.Удалить( ПроверяемыеРеквизиты.Найти( "Хранилище_Адрес" ) );
		ПроверяемыеРеквизиты.Удалить( ПроверяемыеРеквизиты.Найти( "Хранилище_Пользователь" ) );
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДекорацияСоздатьКаталогПоискаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "СоздатьКаталог" Тогда
		СоздатьКаталог( ТекущийКаталог + КаталогПоиска() );
		Элементы.ДекорацияСоздатьКаталогПоиска.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура Прочитать(Команда)
	
	Если Не ЗначениеЗаполнено( ИмяФайлаНастроек ) Тогда
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		
		файл = Новый Файл( ИмяФайлаНастроек );
		
		файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПрочитатьЗавершение", ЭтаФорма));
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	#Если Не ВебКлиент Тогда
		
		Если Не Существует Тогда
			Возврат;
		КонецЕсли;
		
		чтениеJSON = Новый ЧтениеJSON;
		
		чтениеJSON.ОткрытьФайл(ИмяФайлаНастроек);
		соотПараметры = ПрочитатьJSON( ЧтениеJSON, Истина );
		чтениеJSON.Закрыть();
		
		прочитанныеПараметры = Новый Соответствие;
		
		ПрочитатьПараметрыРекурсивно( соотПараметры, прочитанныеПараметры );
		
		OSCRIPT        = прочитанныеПараметры.Получить( "OSCRIPT" );
		ОсновнойСкрипт = прочитанныеПараметры.Получить( "Main_os" );
		EXE1CV8        = прочитанныеПараметры.Получить( "EXE1CV8" );
		FileBackup     = прочитанныеПараметры.Получить( "FileBackup" );
		Script_Restore = прочитанныеПараметры.Получить( "Script_Restore" );
		
		ВыгружатьБекап      = прочитанныеПараметры.Получить( "Source_SQL.UseBackup" );
		Source_SQL_Server   = прочитанныеПараметры.Получить( "Source_SQL.Server" );
		Source_SQL_User     = прочитанныеПараметры.Получить( "Source_SQL.User" );
		Source_SQL_Password = прочитанныеПараметры.Получить( "Source_SQL.Password" );
		Source_SQL_Base     = прочитанныеПараметры.Получить( "Source_SQL.Base" );
		
		ЗагружатьИзБекапа    = прочитанныеПараметры.Получить( "Current_SQL.UseRestore" );
		УдалятьБекап         = прочитанныеПараметры.Получить( "Current_SQL.DelBackup" );
		Current_SQL_Server   = прочитанныеПараметры.Получить( "Current_SQL.Server" );
		Current_SQL_User     = прочитанныеПараметры.Получить( "Current_SQL.User" );
		Current_SQL_Password = прочитанныеПараметры.Получить( "Current_SQL.Password" );
		Current_SQL_Base     = прочитанныеПараметры.Получить( "Current_SQL.Base" );
		
		База_СтрокаПодключения = прочитанныеПараметры.Получить( "Current_Base.Connect" );
		База_Пользователь      = прочитанныеПараметры.Получить( "Current_Base.User" );
		База_Пароль            = прочитанныеПараметры.Получить( "Current_Base.Password" );
		База_ПутьКОбработке    = прочитанныеПараметры.Получить( "Current_Base.EPF" );
		
		ПодключатьКХранилищу   = прочитанныеПараметры.Получить( "Current_Repo.Blind" );
		Хранилище_Адрес        = прочитанныеПараметры.Получить( "Current_Repo.Connect" );
		Хранилище_Пользователь = прочитанныеПараметры.Получить( "Current_Repo.User" );
		Хранилище_Пароль       = прочитанныеПараметры.Получить( "Current_Repo.Password" );
		Хранилище_ОбновитьПослеПодключения = прочитанныеПараметры.Получить( "Current_Repo.UpdateCfg" );
		
		НастроитьВидимостьДоступность();
		
	#КонецЕсли
	
КонецПроцедуры


&НаКлиенте
Процедура Записать(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл( ИмяФайлаНастроек,,, Новый ПараметрыЗаписиJSON(, Символы.Таб ));
	
	соот = Новый Соответствие;
	
	общиеПараметры = Новый Соответствие;
	общиеПараметры.Вставить( "OSCRIPT"       , OSCRIPT );
	общиеПараметры.Вставить( "Main_os"       , ОсновнойСкрипт );
	общиеПараметры.Вставить( "EXE1CV8"       , EXE1CV8 );
	общиеПараметры.Вставить( "FileBackup"    , FileBackup );
	общиеПараметры.Вставить( "Script_Restore", Script_Restore );
	
	соот.Вставить( НСтр( "ru='Общие параметры'" ), общиеПараметры );
	
	параметрыБазыИсточника = Новый Соответствие;
	параметрыБазыИсточника.Вставить( "Source_SQL.UseBackup", ВыгружатьБекап );
	параметрыБазыИсточника.Вставить( "Source_SQL.Server", Source_SQL_Server );
	параметрыБазыИсточника.Вставить( "Source_SQL.User", Source_SQL_User );
	параметрыБазыИсточника.Вставить( "Source_SQL.Password", Source_SQL_Password );
	параметрыБазыИсточника.Вставить( "Source_SQL.Base", Source_SQL_Base );
	
	
	соот.Вставить( НСтр( "ru='Параметры базы-источника'" ), параметрыБазыИсточника );
	
	параметрыБазыПриемника = Новый Соответствие;
	параметрыБазыПриемника.Вставить( "Current_SQL.UseRestore", ЗагружатьИзБекапа );
	параметрыБазыПриемника.Вставить( "Current_SQL.DelBackup", УдалятьБекап );
	параметрыБазыПриемника.Вставить( "Current_SQL.Server", Current_SQL_Server );
	параметрыБазыПриемника.Вставить( "Current_SQL.User", Current_SQL_User );
	параметрыБазыПриемника.Вставить( "Current_SQL.Password", Current_SQL_Password );
	параметрыБазыПриемника.Вставить( "Current_SQL.Base", Current_SQL_Base );
	
	параметрыБазыПриемника.Вставить( "Current_Base.Connect", База_СтрокаПодключения );
	параметрыБазыПриемника.Вставить( "Current_Base.User", База_Пользователь );
	параметрыБазыПриемника.Вставить( "Current_Base.Password", База_Пароль );
	параметрыБазыПриемника.Вставить( "Current_Base.EPF", База_ПутьКОбработке );
	
	параметрыБазыПриемника.Вставить( "Current_Repo.Blind", ПодключатьКХранилищу );
	параметрыБазыПриемника.Вставить( "Current_Repo.Connect", Хранилище_Адрес );
	параметрыБазыПриемника.Вставить( "Current_Repo.User", Хранилище_Пользователь );
	параметрыБазыПриемника.Вставить( "Current_Repo.Password", Хранилище_Пароль );
	параметрыБазыПриемника.Вставить( "Current_Repo.UpdateCfg", Хранилище_ОбновитьПослеПодключения );
	
	соот.Вставить( НСтр( "ru='Параметры базы-приемника'" ), параметрыБазыПриемника );
	
	ЗаписатьJSON( ЗаписьJSON, соот );
	
	ЗаписьJSON.Закрыть();
	
	Модифицированность = Ложь;
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлИЗапустить(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Записать( Команда );
	
	отказ = Ложь;
	
	Если Не ЗначениеЗаполнено( ОсновнойСкрипт ) Тогда
		
		СообщитьПользователю( НСтр( "ru='Не заполнен основной скрипт. Нечего запускать.'" ), "ОсновнойСкрипт", отказ );
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено( OSCRIPT ) Тогда
		
		СообщитьПользователю( НСтр( "ru='Не заполнен путь к OSCRIPT.exe. Нечем запускать.'" ), "OSCRIPT", отказ );
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		
		имяВременногоФайла = ПолучитьИмяВременногоФайла("bat");
		
		файлBat = Новый ЗаписьТекста(имяВременногоФайла, КодировкаТекста.ANSI);
		файлBat.Записать( ТекстBatФайла );
		файлBat.Закрыть();
		
		кодВозврата = 0;
		
		ЗапуститьПриложение( имяВременногоФайла, ТекущийКаталог, Истина, КодВозврата );
		
		УдалитьФайлы( имяВременногоФайла );
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокуBAT(Команда)
	
	отказ = Ложь;
	
	Если Не ЗначениеЗаполнено( ОсновнойСкрипт ) Тогда
		
		СообщитьПользователю( НСтр( "ru='Не заполнен основной скрипт. Нечего запускать.'" ), "ОсновнойСкрипт", отказ );
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено( OSCRIPT ) Тогда
		
		СообщитьПользователю( НСтр( "ru='Не заполнен путь к OSCRIPT.exe. Нечем запускать.'" ), "OSCRIPT", отказ );
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено( ИмяФайлаНастроек ) Тогда
		
		СообщитьПользователю( НСтр( "ru='Не указан файл настроек.'" ), "ИмяФайлаНастроек", отказ );
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекстBatФайла = "chcp 1251
	|" + OSCRIPT + " " + ОсновнойСкрипт + " " + ИмяФайлаНастроек + "
	|pause";
	
КонецПроцедуры


&НаКлиенте
Процедура СохранитьВBat(Команда)
	
	Если Не ЗначениеЗаполнено( ТекстBatФайла ) Тогда
		СообщитьПользователю( НСтр( "ru='Текст bat файла пуст.'" ), "ТекстBatФайла" );
		Возврат;
	КонецЕсли;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла( РежимДиалогаВыбораФайла.Сохранение );
	
	ДиалогОткрытияФайла.ПолноеИмяФайла = "Copy " + Source_SQL_Base + " in " + Current_SQL_Base + ".bat";
	ДиалогОткрытияФайла.ПроверятьСуществованиеФайла = Истина;
	
	ДиалогОткрытияФайла.Фильтр = НСтр( "ru='Пакетный файл Windows '" ) + " (*.bat|*.bat";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр( "ru='Выберите файл для сохранения'" );
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		
		файлBat = Новый ЗаписьТекста(ДиалогОткрытияФайла.ПолноеИмяФайла, КодировкаТекста.ANSI);
		файлBat.Записать( ТекстBatФайла );
		файлBat.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#Область ВыборФайлов

&НаКлиенте
Процедура ИмяФайлаНастроекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла( РежимДиалогаВыбораФайла.Открытие );
	
	Если ЗначениеЗаполнено( ИмяФайлаНастроек ) Тогда
		
		ДиалогОткрытияФайла.ПолноеИмяФайла = ИмяФайлаНастроек;
		
	Иначе
		
		имяБазы = Current_SQL_Base;
		
		Если Не ЗначениеЗаполнено( имяБазы ) Тогда
			
			имяБазы = "db111";
			
		КонецЕсли;
		
		ДиалогОткрытияФайла.ПолноеИмяФайла = имяБазы + "." + РасширениеФайлаНастроек();
		
	КонецЕсли;
	
	ДиалогОткрытияФайла.Фильтр = НСтр( "ru='Настройки базы'" ) + " (*." + РасширениеФайлаНастроек() + "|*." + РасширениеФайлаНастроек();
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр( "ru='Выберите файл настройки'" );
	
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ИмяФайлаНастроекНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("ДиалогОткрытияФайла", ДиалогОткрытияФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНастроекНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогОткрытияФайла = ДополнительныеПараметры.ДиалогОткрытияФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ИмяФайлаНастроек = ДиалогОткрытияФайла.ПолноеИмяФайла;
		Прочитать( Неопределено );
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНастроекПриИзменении(Элемент)
	
	Если Элемент.СписокВыбора.НайтиПоЗначению( ИмяФайлаНастроек ) = Неопределено Тогда
		
		файл = Новый Файл( ИмяФайлаНастроек );
		
		Элементы.ИмяФайлаНастроек.СписокВыбора.Добавить( файл.ПолноеИмя, файл.Имя );
		
	КонецЕсли;
	
	Прочитать( Неопределено );
	
КонецПроцедуры

&НаКлиенте
Процедура Файл_НачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено
		И ВыбранныеФайлы.Количество() > 0 Тогда
		ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита] = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Script_RestoreНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла( РежимДиалогаВыбораФайла.Открытие );
	
	Если ЗначениеЗаполнено( Script_Restore ) Тогда
		
		ДиалогОткрытияФайла.ПолноеИмяФайла = Script_Restore;
		
	КонецЕсли;
	
	ДиалогОткрытияФайла.Фильтр = НСтр( "ru='Исходный файл SQL'" ) + " (*.sql)|*.sql";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр( "ru='Выберите файл со скриптом восстановления'" );
	
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("Файл_НачалоВыбораЗавершение", ЭтаФорма, Новый Структура("ИмяРеквизита", "Script_Restore")));
	
КонецПроцедуры

&НаКлиенте
Процедура EXE1CV8НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла( РежимДиалогаВыбораФайла.Открытие );
	
	Если ЗначениеЗаполнено( EXE1CV8 ) Тогда
		
		ДиалогОткрытияФайла.ПолноеИмяФайла = EXE1CV8;
		
	КонецЕсли;
	
	ДиалогОткрытияФайла.Фильтр = НСтр( "ru='1cv8.exe'" ) + "|1cv8.exe";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр( "ru='Выберите 1cv8.exe'" );
	
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("Файл_НачалоВыбораЗавершение", ЭтаФорма, Новый Структура("ИмяРеквизита", "EXE1CV8")));
	
КонецПроцедуры

&НаКлиенте
Процедура База_ПутьКОбработкеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла( РежимДиалогаВыбораФайла.Открытие );
	
	Если ЗначениеЗаполнено( База_ПутьКОбработке ) Тогда
		
		ДиалогОткрытияФайла.ПолноеИмяФайла = База_ПутьКОбработке;
		
	КонецЕсли;
	
	ДиалогОткрытияФайла.Фильтр = НСтр( "ru='Обработка'" ) + " (*.epf)|*.epf";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр( "ru='Выберите обработку'" );
	
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("Файл_НачалоВыбораЗавершение", ЭтаФорма, Новый Структура("ИмяРеквизита", "База_ПутьКОбработке")));
	
КонецПроцедуры

&НаКлиенте
Процедура FileBackupНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла( РежимДиалогаВыбораФайла.Открытие );
	
	Если ЗначениеЗаполнено( FileBackup ) Тогда
		
		ДиалогОткрытияФайла.ПолноеИмяФайла = FileBackup;
		
	КонецЕсли;
	
	ДиалогОткрытияФайла.Фильтр = НСтр( "ru='Файл sql-backup'" ) + " (*.bak)|*.bak";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр( "ru='Выберите файл sql-backup'" );
	
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("Файл_НачалоВыбораЗавершение", ЭтаФорма, Новый Структура("ИмяРеквизита", "FileBackup")));
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойСкриптНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла( РежимДиалогаВыбораФайла.Открытие );
	
	Если ЗначениеЗаполнено( ОсновнойСкрипт ) Тогда
		
		ДиалогОткрытияФайла.ПолноеИмяФайла = ОсновнойСкрипт;
		
	КонецЕсли;
	
	ДиалогОткрытияФайла.Фильтр = НСтр( "ru='Файл скрипта'" ) + " (*.os)|*.os";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр( "ru='Выберите файл скрипта'" );
	
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("Файл_НачалоВыбораЗавершение", ЭтаФорма, Новый Структура("ИмяРеквизита", "ОсновнойСкрипт")));
	
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура ЗагружатьИзБекапаПриИзменении(Элемент)
	
	Элементы.Группа_БазаПриемник_SQL.Доступность = ЗагружатьИзБекапа;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьБекапПриИзменении(Элемент)
	Элементы.Группа_БазаИсточник_SQL.Доступность = ВыгружатьБекап;
КонецПроцедуры

&НаКлиенте
Процедура ПодключатьКХранилищуПриИзменении(Элемент)
	Элементы.Группа_БазаПриемник.Доступность = ПодключатьКХранилищу;
	Элементы.Группа_Хранилище.Доступность = ПодключатьКХранилищу;
КонецПроцедуры


#Область Прочее

&НаКлиенте
Процедура СообщитьПользователю( Знач пТекст, Знач пПоле, Отказ = Ложь)
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = пТекст;
	Сообщение.Поле = пПоле;
	Сообщение.Сообщить();
	Отказ = Истина;
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция ПеременныеОкружения()
	
	ПеременныеОкружения = Новый Структура;
	Попытка
		
		WshShell = Новый COMОбъект("WScript.Shell");
		WshSysEnv = WshShell.Environment("Process");
		
		ПеременныеОкружения.Вставить("oscript" , WshSysEnv.Item("oscript"));
		
	Исключение
	КонецПопытки;
	
	Возврат ПеременныеОкружения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПрочитатьПараметрыРекурсивно( Знач пПараметры, пПрочитенныеПараметры )

	Для каждого цЭлемент Из пПараметры Цикл
		
		Если ТипЗнч( цЭлемент.Значение ) = Тип("Структура")
			ИЛИ ТипЗнч( цЭлемент.Значение ) = Тип("Соответствие") Тогда
			
			ПрочитатьПараметрыРекурсивно( цЭлемент.Значение, пПрочитенныеПараметры );
			
		Иначе
			
			пПрочитенныеПараметры.Вставить( цЭлемент.Ключ, цЭлемент.Значение );
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьДоступность()
	
	Элементы.Группа_БазаПриемник_SQL.Доступность = ЗагружатьИзБекапа;
	Элементы.Группа_БазаИсточник_SQL.Доступность = ВыгружатьБекап;
	Элементы.Группа_БазаПриемник.Доступность     = ПодключатьКХранилищу;
	Элементы.Группа_Хранилище.Доступность        = ПодключатьКХранилищу;

КонецПроцедуры

#КонецОбласти

#Область Тестирование

Функция ТекущиеЗначения()
	
	текЗначения = Новый Структура;
	
	Для каждого цРеквизит Из ПолучитьРеквизиты() Цикл
		
		текЗначения.Вставить( цРеквизит.Имя, ЭтаФорма[цРеквизит.Имя] );
		
	КонецЦикла;
	
	Возврат текЗначения;
	
КонецФункции

&НаКлиенте
Процедура ТестОбработки(Команда)
	
	#Если Не ВебКлиент Тогда
	
	старЗначения = ТекущиеЗначения();
	
	генератор = Новый ГенераторСлучайныхЧисел( ТекущаяУниверсальнаяДатаВМиллисекундах() );
	
	тестовыеЗначения = Новый Структура("OSCRIPT,ОсновнойСкрипт,EXE1CV8,FileBackup,Script_Restore,
	|Source_SQL_Server,Source_SQL_User,Source_SQL_Password,Source_SQL_Base,
	|Current_SQL_Server,Current_SQL_User,Current_SQL_Password,Current_SQL_Base,
	|База_СтрокаПодключения,База_Пользователь,База_Пароль,База_ПутьКОбработке,
	|Хранилище_Адрес,Хранилище_Пользователь,Хранилище_Пароль");
	
	Для каждого цЭлемент Из тестовыеЗначения Цикл
		тестовыеЗначения.Вставить( цЭлемент.Ключ, Строка( генератор.СлучайноеЧисло() ) );
	КонецЦикла;
	
	тестовыеЗначения.Вставить( "ВыгружатьБекап", Истина );
	тестовыеЗначения.Вставить( "ЗагружатьИзБекапа", Истина );
	тестовыеЗначения.Вставить( "ПодключатьКХранилищу", Истина );
	тестовыеЗначения.Вставить( "Хранилище_ОбновитьПослеПодключения", Истина );
	тестовыеЗначения.Вставить( "УдалятьБекап", Истина );
	
	лИмяФайлаНастроек = ПолучитьИмяВременногоФайла( РасширениеФайлаНастроек() );
	
	ИмяФайлаНастроек = лИмяФайлаНастроек;
	
	ЗаполнитьЗначенияСвойств( ЭтаФорма, тестовыеЗначения );
	
	Записать( Неопределено );
	
	ЗаполнитьЗначенияСвойств( ЭтаФорма, старЗначения,, "Объект" );
	ИмяФайлаНастроек = лИмяФайлаНастроек;
	
	ПрочитатьЗавершение( Истина, Неопределено);
	
	тестПрошел = Истина;
	
	Для каждого цЭлемент Из тестовыеЗначения Цикл
		
		Если Не цЭлемент.Значение = ЭтаФорма[цЭлемент.Ключ] Тогда
			
			СообщитьПользователю( цЭлемент.Ключ + НСтр( "ru=': Различаются значения. Должно быть '" ) + цЭлемент.Значение, цЭлемент.Ключ );
			
			тестПрошел = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если тестПрошел Тогда
		
		ЗаполнитьЗначенияСвойств( ЭтаФорма, старЗначения,, "Объект" );
		
		НачатьУдалениеФайлов(Новый ОписаниеОповещения("ТестОбработкиЗавершение", ЭтаФорма), лИмяФайлаНастроек );
		
		ПоказатьОповещениеПользователя( НСтр( "ru='Тест прошел успешно'" ) );
		
	КонецЕсли;
	
	НастроитьВидимостьДоступность();
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ТестОбработкиЗавершение(ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

#КонецОбласти



